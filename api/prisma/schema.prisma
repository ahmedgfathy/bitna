// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============================================
// MULTI-TENANT REAL ESTATE CRM SCHEMA - BITNA
// ============================================

// Enum Definitions
enum TenantType {
  FREELANCER
  COMPANY
}

enum UserRole {
  OWNER
  MANAGER
  SALES_AGENT
  MARKETER
  ADMIN_ASSISTANT
  EMPLOYEE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SubscriptionStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
  TRIAL
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  NEGOTIATING
  WON
  LOST
}

enum LeadSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  DIRECT_CALL
  WALK_IN
  OTHER
}

enum ActivityType {
  TASK
  NOTE
  MEETING
}

enum ActivityStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum ActivityPriority {
  LOW
  MEDIUM
  HIGH
}

enum LinkedEntityType {
  LEAD
  PROPERTY
}

// ============================================
// CORE TENANT MODEL
// ============================================

model Tenant {
  id        String   @id @default(uuid())
  name      String
  type      TenantType
  mobile    String   @unique // Primary contact number
  
  // Company Profile Information
  logoUrl     String?
  companyName String?
  address     String?
  city        String?
  region      String?
  country     String?  @default("Egypt")
  phone       String?
  email       String?
  website     String?
  description String?  @db.Text
  
  // Subscription fields
  subscriptionStatus  SubscriptionStatus @default(TRIAL)
  subscriptionStart   DateTime?
  subscriptionEnd     DateTime?
  
  // Metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  users         User[]
  properties    Property[]
  leads         Lead[]
  activities    Activity[]
  propertyTypes PropertyType[]
  regions       Region[]
  categories    Category[]
  listingStatuses ListingStatus[]
  
  @@index([mobile])
  @@index([subscriptionStatus])
  @@map("tenants")
}

// ============================================
// USER MODEL (Owner, Manager, Employee)
// ============================================

model User {
  id       String     @id @default(uuid())
  name     String
  mobile   String     @unique // Used for OTP authentication
  email    String?
  role     UserRole   @default(EMPLOYEE)
  status   UserStatus @default(ACTIVE)
  
  // Temporary PIN for first login (generated by owner)
  temporaryPin String?
  pinResetRequired Boolean @default(false)
  
  // Tenant association
  tenantId String
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Status tracking
  isActive Boolean  @default(true)
  lastLogin DateTime?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  createdProperties Property[] @relation("PropertyCreator")
  assignedLeads     Lead[]     @relation("LeadAssignee")
  assignedActivities Activity[] @relation("ActivityAssignee")
  createdActivities  Activity[] @relation("ActivityCreator")
  
  @@index([tenantId])
  @@index([mobile])
  @@index([role])
  @@index([status])
  @@map("users")
}

// ============================================
// PROPERTY MODEL
// ============================================

model Property {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  price       Decimal @db.Decimal(15, 2)
  
  // Location
  latitude    Decimal @db.Decimal(10, 8)
  longitude   Decimal @db.Decimal(11, 8)
  address     String? @db.Text
  
  // Public visibility control
  isPublic    Boolean @default(false)
  
  // Property details
  bedrooms    Int?
  bathrooms   Int?
  area        Decimal? @db.Decimal(10, 2) // Square meters or feet
  
  // Tenant association
  tenantId    String
  tenant      Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Creator
  createdById String
  createdBy   User    @relation("PropertyCreator", fields: [createdById], references: [id])
  
  // Static data relations (tenant-scoped dropdowns)
  propertyTypeId    String?
  propertyType      PropertyType? @relation(fields: [propertyTypeId], references: [id])
  
  regionId          String?
  region            Region?       @relation(fields: [regionId], references: [id])
  
  categoryId        String?
  category          Category?     @relation(fields: [categoryId], references: [id])
  
  listingStatusId   String?
  listingStatus     ListingStatus? @relation(fields: [listingStatusId], references: [id])
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([tenantId])
  @@index([isPublic])
  @@index([latitude, longitude])
  @@index([propertyTypeId])
  @@index([regionId])
  @@index([categoryId])
  @@map("properties")
}

// ============================================
// LEAD MODEL
// ============================================

model Lead {
  id          String     @id @default(uuid())
  name        String
  mobile      String
  email       String?
  source      LeadSource @default(OTHER)
  status      LeadStatus @default(NEW)
  notes       String?    @db.Text
  
  // Tenant association
  tenantId    String
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Assignment
  assignedToId String?
  assignedTo   User?     @relation("LeadAssignee", fields: [assignedToId], references: [id])
  
  // Metadata
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([tenantId])
  @@index([status])
  @@index([assignedToId])
  @@map("leads")
}

// ============================================
// TENANT-SCOPED STATIC DATA TABLES (Dropdowns)
// ============================================

// Property Type (e.g., Apartment, Villa, Office)
model PropertyType {
  id       String     @id @default(uuid())
  name     String
  
  // Tenant association
  tenantId String
  tenant   Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Relations
  properties Property[]
  
  // Metadata
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@unique([tenantId, name]) // Prevent duplicate names per tenant
  @@index([tenantId])
  @@map("property_types")
}

// Region (e.g., Downtown, Suburbs, North District)
model Region {
  id       String     @id @default(uuid())
  name     String
  
  // Tenant association
  tenantId String
  tenant   Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Relations
  properties Property[]
  
  // Metadata
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@unique([tenantId, name])
  @@index([tenantId])
  @@map("regions")
}

// Category (e.g., Sale, Rent, Commercial)
model Category {
  id       String     @id @default(uuid())
  name     String
  
  // Tenant association
  tenantId String
  tenant   Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Relations
  properties Property[]
  
  // Metadata
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@unique([tenantId, name])
  @@index([tenantId])
  @@map("categories")
}

// Listing Status (e.g., Available, Under Offer, Sold)
model ListingStatus {
  id       String     @id @default(uuid())
  name     String
  
  // Tenant association
  tenantId String
  tenant   Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Relations
  properties Property[]
  
  // Metadata
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@unique([tenantId, name])
  @@index([tenantId])
  @@map("listing_statuses")
}

// ============================================
// ACTIVITIES MODEL (Tasks, Notes, Meetings)
// ============================================

model Activity {
  id          String             @id @default(uuid())
  type        ActivityType
  title       String
  description String?            @db.Text
  status      ActivityStatus     @default(PENDING)
  priority    ActivityPriority   @default(MEDIUM)
  
  // Scheduling
  dateTime     DateTime?
  reminderTime DateTime?
  
  // Link to parent entity (Lead or Property)
  linkedType LinkedEntityType
  linkedId   String
  
  // Tenant association
  tenantId   String
  tenant     Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Assignment
  assignedToId String?
  assignedTo   User?             @relation("ActivityAssignee", fields: [assignedToId], references: [id])
  
  // Creator
  createdById String
  createdBy   User              @relation("ActivityCreator", fields: [createdById], references: [id])
  
  // Metadata
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@index([tenantId])
  @@index([linkedType, linkedId])
  @@index([assignedToId])
  @@index([status])
  @@index([dateTime])
  @@map("activities")
}
